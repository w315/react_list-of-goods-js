{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD_LENGTH","SORT_FIELD_ALPHABET","App","useState","sortField","setSortField","reverseField","setRevField","visibleGoods","sort","good1","good2","length","toLowerCase","reverse","className","type","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"yNAIaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAoB,SACpBC,EAAsB,WAEfC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAqBC,EAArB,KACMC,EAAY,UAAOT,GA6BzB,OA3BIK,GACFI,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQP,GACN,KAAKJ,EACH,OAAOU,EAAME,OAASD,EAAMC,OAE9B,KAAKX,EACH,OAAIS,EAAMG,cAAgBF,EAAME,eACtB,EAGNH,EAAMG,cAAgBF,EAAME,cACvB,EAGF,EAET,QACE,OAAO,MAKXP,GACFE,EAAaM,UAIb,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAAS,kBAAOZ,EAAaJ,IAC7Bc,UAAS,yBAAoBX,IAAcH,GAAuB,YAHpE,iCAQA,wBACEe,KAAK,SACLC,QAAS,kBAAOZ,EAAaL,IAC7Be,UAAS,4BAAuBX,IAAcJ,GAAqB,YAHrE,4BAQA,wBACEgB,KAAK,SACLD,UAAS,6BAAwC,IAAjBT,GAA0B,YAE1DW,QAAS,kBAAOV,GAAaD,IAJ/B,uBASmB,IAAjBA,GAAwC,KAAdF,IAC1B,wBACEY,KAAK,SACLD,UAAU,4BACVE,QAAS,WACPZ,EAAa,IACbE,GAAY,IALhB,sBAcJ,6BACGC,EAAaU,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YC9FlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.c14a8eb4.chunk.js","sourcesContent":["import { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_LENGTH = 'length';\nconst SORT_FIELD_ALPHABET = 'alphabet';\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [reverseField, setRevField] = useState(false);\n  const visibleGoods = [...goodsFromServer];\n\n  if (sortField) {\n    visibleGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_FIELD_LENGTH:\n          return good1.length - good2.length;\n\n        case SORT_FIELD_ALPHABET:\n          if (good1.toLowerCase() < good2.toLowerCase()) {\n            return -1;\n          }\n\n          if (good1.toLowerCase() > good2.toLowerCase()) {\n            return 1;\n          }\n\n          return 0;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverseField) {\n    visibleGoods.reverse();\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => (setSortField(SORT_FIELD_ALPHABET))}\n          className={`button is-info ${sortField !== SORT_FIELD_ALPHABET && 'is-light'}`}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => (setSortField(SORT_FIELD_LENGTH))}\n          className={`button is-success ${sortField !== SORT_FIELD_LENGTH && 'is-light'}`}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-warning ${reverseField === false && 'is-light'\n          }`}\n          onClick={() => (setRevField(!reverseField))}\n        >\n          Reverse\n        </button>\n\n        {(reverseField !== false || sortField !== '') && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortField('');\n              setRevField(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}